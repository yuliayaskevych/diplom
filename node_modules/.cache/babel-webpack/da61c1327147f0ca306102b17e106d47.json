{"ast":null,"code":"import { map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"@angular/fire/database\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(auth, db) {\n      this.auth = auth;\n      this.db = db;\n    }\n\n    login(email, password) {\n      return new Promise((resolve, reject) => {\n        this.auth.signInWithEmailAndPassword(email, password).then(res => resolve(res), err => reject(err));\n      });\n    }\n\n    read(path) {\n      return this.db.object(path).valueChanges();\n    }\n\n    readGames(path) {\n      return this.read(path).pipe(map(res => res), map(res => Object.values(res)));\n    }\n\n    readAllGames() {\n      return this.readGames('games');\n    }\n\n    readGamesFromLibrary(uid) {\n      return this.readGames(`users/${uid}/games`);\n    }\n\n    readUser(uid) {\n      return this.read(`users/${uid}`).pipe(map(r => r));\n    }\n\n    readFriends(uid) {\n      return this.read(`users/${uid}/friends`).pipe(map(res => {\n        const data = res;\n\n        if (data) {\n          return Object.keys(data).map(key => ({\n            username: data[key],\n            id: key\n          }));\n        }\n\n        return data;\n      }));\n    }\n\n    update(path, data) {\n      this.db.database.ref(path).update(data).then(() => {\n        alert('update successful');\n      }).catch(err => {\n        alert(err.message);\n      });\n    }\n\n    delete(path) {\n      return this.db.object(path) // return this.db.database.ref(path)\n      .remove().then(() => alert('delete successful')).catch(err => alert(err.message));\n    }\n\n    push(path, data) {\n      this.db.database.ref(path).push(data).then(() => alert(\"add data\")).catch(err => alert(err.message));\n    }\n\n    searchUser(uid, search) {\n      let friendExist = [];\n      return this.read('users').pipe(map(r => r), tap(r => {\n        friendExist.push(r[uid].username);\n\n        if (r[uid].friends) {\n          friendExist = [...Object.values(r[uid].friends), r[uid].username];\n        }\n      }), map(users => Object.values(users).map(user => user.username).filter(user => user.includes(search)).filter(user => !friendExist.includes(user))));\n    }\n\n    addGameInLibrary(uid, game) {\n      this.db.object(`users/${uid}/games/${game.name}`).set(game).then(() => alert(`add ${game.name} game`)).catch(err => alert(err.message));\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFireDatabase));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}